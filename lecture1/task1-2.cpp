#include <iostream>
#include <vector>

int main() {
    int n;
    int x;
    std::vector<int> a;
    std::cin >> n;

    for (int i = n; i > 0; --i) {
        a.push_back(i);
    }

    for (int i = 0; i < n - 1; ++i) {
        for (int j = i; j < n - 1; ++j) {
            if (a[j] > a[j + 1]) {
                std::swap(a[j], a[j + 1]);
            }
        }
    }

    // Этот алгоритм наглядно ломается на массиве, отсортированном по невозрастанию.
    // Дело в том, что при первой итерации происходит дефолтная сортировка пузырьком.
    // НО не все так радужно, как кажется! У нашей сортировки начинаются проблемы (в семье):
    // стартовый индекс второго цикла смещается, и, грубо говоря, происходит частичная сортировка
    // подмассива a[j:n]. В чем анекдот? В том, что другая часть массива может оказаться
    // никогда не рассмотренной. Например, частный случай: 3, 2, 1. При первой же итерации
    // НЕ минимум займет нулевую позицию, а из-за смещения больше мы эту позицию никогда
    // не рассмотрим => в минимуме стоит не минимум => сортировка умирает.

    for (int element: a) {
        std::cout << element;
    }
}